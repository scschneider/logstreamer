// Code generated by protoc-gen-go. DO NOT EDIT.
// source: messages.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	messages.proto

It has these top-level messages:
	LogPathRequest
	LogEntryReply
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LogPathRequest struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
}

func (m *LogPathRequest) Reset()                    { *m = LogPathRequest{} }
func (m *LogPathRequest) String() string            { return proto.CompactTextString(m) }
func (*LogPathRequest) ProtoMessage()               {}
func (*LogPathRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LogPathRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type LogEntryReply struct {
	Log string `protobuf:"bytes,1,opt,name=log" json:"log,omitempty"`
}

func (m *LogEntryReply) Reset()                    { *m = LogEntryReply{} }
func (m *LogEntryReply) String() string            { return proto.CompactTextString(m) }
func (*LogEntryReply) ProtoMessage()               {}
func (*LogEntryReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LogEntryReply) GetLog() string {
	if m != nil {
		return m.Log
	}
	return ""
}

func init() {
	proto.RegisterType((*LogPathRequest)(nil), "pb.LogPathRequest")
	proto.RegisterType((*LogEntryReply)(nil), "pb.LogEntryReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Logs service

type LogsClient interface {
	GetLogs(ctx context.Context, in *LogPathRequest, opts ...grpc.CallOption) (Logs_GetLogsClient, error)
}

type logsClient struct {
	cc *grpc.ClientConn
}

func NewLogsClient(cc *grpc.ClientConn) LogsClient {
	return &logsClient{cc}
}

func (c *logsClient) GetLogs(ctx context.Context, in *LogPathRequest, opts ...grpc.CallOption) (Logs_GetLogsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Logs_serviceDesc.Streams[0], c.cc, "/pb.Logs/GetLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &logsGetLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Logs_GetLogsClient interface {
	Recv() (*LogEntryReply, error)
	grpc.ClientStream
}

type logsGetLogsClient struct {
	grpc.ClientStream
}

func (x *logsGetLogsClient) Recv() (*LogEntryReply, error) {
	m := new(LogEntryReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Logs service

type LogsServer interface {
	GetLogs(*LogPathRequest, Logs_GetLogsServer) error
}

func RegisterLogsServer(s *grpc.Server, srv LogsServer) {
	s.RegisterService(&_Logs_serviceDesc, srv)
}

func _Logs_GetLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogPathRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogsServer).GetLogs(m, &logsGetLogsServer{stream})
}

type Logs_GetLogsServer interface {
	Send(*LogEntryReply) error
	grpc.ServerStream
}

type logsGetLogsServer struct {
	grpc.ServerStream
}

func (x *logsGetLogsServer) Send(m *LogEntryReply) error {
	return x.ServerStream.SendMsg(m)
}

var _Logs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Logs",
	HandlerType: (*LogsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetLogs",
			Handler:       _Logs_GetLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "messages.proto",
}

func init() { proto.RegisterFile("messages.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 146 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcb, 0x4d, 0x2d, 0x2e,
	0x4e, 0x4c, 0x4f, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x52,
	0xe1, 0xe2, 0xf3, 0xc9, 0x4f, 0x0f, 0x48, 0x2c, 0xc9, 0x08, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e,
	0x11, 0x12, 0xe2, 0x62, 0x29, 0x48, 0x2c, 0xc9, 0x90, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02,
	0xb3, 0x95, 0x14, 0xb9, 0x78, 0x7d, 0xf2, 0xd3, 0x5d, 0xf3, 0x4a, 0x8a, 0x2a, 0x83, 0x52, 0x0b,
	0x72, 0x2a, 0x85, 0x04, 0xb8, 0x98, 0x73, 0xf2, 0xd3, 0xa1, 0x6a, 0x40, 0x4c, 0x23, 0x1b, 0x2e,
	0x16, 0x9f, 0xfc, 0xf4, 0x62, 0x21, 0x13, 0x2e, 0x76, 0xf7, 0xd4, 0x12, 0x30, 0x53, 0x48, 0xaf,
	0x20, 0x49, 0x0f, 0xd5, 0x74, 0x29, 0x41, 0xa8, 0x18, 0xc2, 0x2c, 0x25, 0x06, 0x03, 0xc6, 0x24,
	0x36, 0xb0, 0x8b, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd0, 0x78, 0x3c, 0x2d, 0xa3, 0x00,
	0x00, 0x00,
}
